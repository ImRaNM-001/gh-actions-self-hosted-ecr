name: Build & Deploy Python App to AWS ECR repository

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  install:
    name: Install uv & other dependencies
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Enable caching
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
      
    - name: Install project dependencies
      run: uv sync --locked --all-extras --dev

    - name: Run tests with pytest
      run: uv run pytest -vs test_calculator.py

  build:
    name: Build & push docker image
    needs: install
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4    

    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR repository
      if: success()
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to ECR
      if: success()
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | tail -c 6)
        TAG_DATE=$(date +"%d-%b-%y")
        BRANCH_NAME=$(echo ${GITHUB_REF_NAME} | sed 's/\//-/g')
        IMAGE_TAG="${BRANCH_NAME}-${SHORT_SHA}-${TAG_DATE}"
        docker build . --file Dockerfile --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
